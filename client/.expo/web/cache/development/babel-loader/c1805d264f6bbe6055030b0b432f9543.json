{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/daniel/Public/Projects/ACNH-Stalks-Helper/frontend/components/DateHeader.js\";\nimport React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { AppLoading } from \"expo\";\nimport { primaryColors, fonts } from \"../models/Styles.js\";\nimport { day } from \"../models/Dates.js\";\n\nvar setDateOptions = function setDateOptions(date) {\n  var d = date;\n  var meridianControl = new Date();\n  meridianControl.setHours(12);\n  setDay(day[d.toDateString().split(\" \")[0]]);\n  setMeridian(d.getTime() < meridianControl.getTime() ? \"AM\" : \"PM\");\n  setHour(d.getHours() % 12);\n  setMinute(d.getMinutes());\n  setTimeLoaded(true);\n};\n\nvar DateHeader = function DateHeader(_ref) {\n  var date = _ref.date;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      weekday = _useState2[0],\n      setDay = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      meridian = _useState4[0],\n      setMeridian = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hour = _useState6[0],\n      setHour = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      minute = _useState8[0],\n      setMinute = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      timeLoaded = _useState10[0],\n      setTimeLoaded = _useState10[1];\n\n  setDateOptions(date);\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.dateText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, weekday, \" \", meridian), React.createElement(Text, {\n    style: styles.timeText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, hour != 0 ? hour : \"12\", \":\", minute < 10 ? \"0\" + minute.toString() : minute, meridian.toLowerCase()));\n};\n\nvar styles = StyleSheet.create({\n  dateContainer: {\n    marginTop: 50\n  },\n  dateText: {\n    fontFamily: \"acnh\",\n    fontSize: 20,\n    alignSelf: \"center\"\n  },\n  timeText: {\n    fontFamily: \"acnh\",\n    fontSize: 15,\n    alignSelf: \"center\"\n  }\n});\nexport default DateHeader;","map":{"version":3,"sources":["/Users/daniel/Public/Projects/ACNH-Stalks-Helper/frontend/components/DateHeader.js"],"names":["React","useState","useEffect","useLayoutEffect","AppLoading","primaryColors","fonts","day","setDateOptions","date","d","meridianControl","Date","setHours","setDay","toDateString","split","setMeridian","getTime","setHour","getHours","setMinute","getMinutes","setTimeLoaded","DateHeader","weekday","meridian","hour","minute","timeLoaded","styles","dateText","timeText","toString","toLowerCase","StyleSheet","create","dateContainer","marginTop","fontFamily","fontSize","alignSelf"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,eAArC,QAA4D,OAA5D;;;;;AAEA,SAASC,UAAT,QAA2B,MAA3B;AAEA,SAASC,aAAT,EAAwBC,KAAxB;AACA,SAASC,GAAT;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AAC/B,MAAIC,CAAC,GAAGD,IAAR;AACA,MAAIE,eAAe,GAAG,IAAIC,IAAJ,EAAtB;AACAD,EAAAA,eAAe,CAACE,QAAhB,CAAyB,EAAzB;AACAC,EAAAA,MAAM,CAACP,GAAG,CAACG,CAAC,CAACK,YAAF,GAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAD,CAAJ,CAAN;AACAC,EAAAA,WAAW,CAACP,CAAC,CAACQ,OAAF,KAAcP,eAAe,CAACO,OAAhB,EAAd,GAA0C,IAA1C,GAAiD,IAAlD,CAAX;AACAC,EAAAA,OAAO,CAACT,CAAC,CAACU,QAAF,KAAe,EAAhB,CAAP;AACAC,EAAAA,SAAS,CAACX,CAAC,CAACY,UAAF,EAAD,CAAT;AACAC,EAAAA,aAAa,CAAC,IAAD,CAAb;AACD,CATD;;AAWA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAc;AAAA,MAAXf,IAAW,QAAXA,IAAW;;AAAA,kBACLR,QAAQ,CAAC,EAAD,CADH;AAAA;AAAA,MACxBwB,OADwB;AAAA,MACfX,MADe;;AAAA,mBAECb,QAAQ,CAAC,EAAD,CAFT;AAAA;AAAA,MAExByB,QAFwB;AAAA,MAEdT,WAFc;;AAAA,mBAGPhB,QAAQ,EAHD;AAAA;AAAA,MAGxB0B,IAHwB;AAAA,MAGlBR,OAHkB;;AAAA,mBAIHlB,QAAQ,EAJL;AAAA;AAAA,MAIxB2B,MAJwB;AAAA,MAIhBP,SAJgB;;AAAA,mBAKKpB,QAAQ,CAAC,KAAD,CALb;AAAA;AAAA,MAKxB4B,UALwB;AAAA,MAKZN,aALY;;AAM/Bf,EAAAA,cAAc,CAACC,IAAD,CAAd;AAeA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEqB,MAAM,CAACC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,OADH,OACaC,QADb,CADF,EAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEI,MAAM,CAACE,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,IAAI,IAAI,CAAR,GAAYA,IAAZ,GAAmB,IADtB,OAEGC,MAAM,GAAG,EAAT,GAAc,MAAMA,MAAM,CAACK,QAAP,EAApB,GAAwCL,MAF3C,EAGGF,QAAQ,CAACQ,WAAT,EAHH,CAJF,CADF;AAYD,CAjCD;;AAmCA,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,aAAa,EAAE;AACbC,IAAAA,SAAS,EAAE;AADE,GADgB;AAI/BP,EAAAA,QAAQ,EAAE;AACRQ,IAAAA,UAAU,EAAE,MADJ;AAERC,IAAAA,QAAQ,EAAE,EAFF;AAGRC,IAAAA,SAAS,EAAE;AAHH,GAJqB;AAS/BT,EAAAA,QAAQ,EAAE;AACRO,IAAAA,UAAU,EAAE,MADJ;AAERC,IAAAA,QAAQ,EAAE,EAFF;AAGRC,IAAAA,SAAS,EAAE;AAHH;AATqB,CAAlB,CAAf;AAeA,eAAejB,UAAf","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport { StyleSheet, Text, View, AsyncStorage } from \"react-native\";\nimport { AppLoading } from \"expo\";\n\nimport { primaryColors, fonts } from \"../models/Styles.js\";\nimport { day } from \"../models/Dates.js\";\n\nconst setDateOptions = (date) => {\n  let d = date;\n  let meridianControl = new Date();\n  meridianControl.setHours(12);\n  setDay(day[d.toDateString().split(\" \")[0]]);\n  setMeridian(d.getTime() < meridianControl.getTime() ? \"AM\" : \"PM\");\n  setHour(d.getHours() % 12);\n  setMinute(d.getMinutes());\n  setTimeLoaded(true);\n};\n\nconst DateHeader = ({ date }) => {\n  const [weekday, setDay] = useState(\"\");\n  const [meridian, setMeridian] = useState(\"\");\n  const [hour, setHour] = useState();\n  const [minute, setMinute] = useState();\n  const [timeLoaded, setTimeLoaded] = useState(false);\n  setDateOptions(date);\n  /*\n  useLayoutEffect(() => {\n    setInterval(() => {\n      let d = date;\n      let meridianControl = new Date();\n      meridianControl.setHours(12);\n      setDay(day[d.toDateString().split(\" \")[0]]);\n      setMeridian(d.getTime() < meridianControl.getTime() ? \"AM\" : \"PM\");\n      setHour(d.getHours() % 12);\n      setMinute(d.getMinutes());\n      setTimeLoaded(true);\n    }, 1000);\n  });*/\n\n  return (\n    <View>\n      <Text style={styles.dateText}>\n        {weekday} {meridian}\n      </Text>\n      <Text style={styles.timeText}>\n        {hour != 0 ? hour : \"12\"}:\n        {minute < 10 ? \"0\" + minute.toString() : minute}\n        {meridian.toLowerCase()}\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  dateContainer: {\n    marginTop: 50,\n  },\n  dateText: {\n    fontFamily: \"acnh\",\n    fontSize: 20,\n    alignSelf: \"center\",\n  },\n  timeText: {\n    fontFamily: \"acnh\",\n    fontSize: 15,\n    alignSelf: \"center\",\n  },\n});\nexport default DateHeader;\n"]},"metadata":{},"sourceType":"module"}