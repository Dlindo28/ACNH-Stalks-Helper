{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect } from \"react\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { useDispatch } from \"react-redux\";\nimport { setDataSufficiency } from \"../actions/dataSufficiencyActions\";\nimport { useNotifications } from \"./useNotifications\";\nimport { Tree0, Tree60, Tree80, Tree85, Tree91 } from \"../models/trees\";\nimport { days } from \"../models/Dates\";\nexport var useSetPrice = function useSetPrice() {\n  var dispatch = useDispatch();\n  var sendNotification = useNotifications();\n\n  var setPrice = function setPrice(price, day) {\n    var isSufficient, previousPrice;\n    return _regeneratorRuntime.async(function setPrice$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(day, price));\n\n          case 3:\n            console.log(day + \" price set to \" + price);\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(checkSufficiency());\n\n          case 6:\n            isSufficient = _context.sent;\n\n            if (!(day == \"Sunday\" || day == \"MondayAM\")) {\n              _context.next = 11;\n              break;\n            }\n\n            if (isSufficient) {\n              initTree();\n            }\n\n            _context.next = 16;\n            break;\n\n          case 11:\n            if (!isSufficient) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(days[days.indexOf(day) - 1]));\n\n          case 14:\n            previousPrice = _context.sent;\n            updateTree(parseInt(previousPrice, 10) < parseInt(price, 10));\n\n          case 16:\n            Keyboard.dismiss();\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 19]], Promise);\n  };\n\n  var getRatio = function getRatio() {\n    var sundayPrice, modayPrice, ratio;\n    return _regeneratorRuntime.async(function getRatio$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"Sunday\"));\n\n          case 3:\n            sundayPrice = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"MondayAM\"));\n\n          case 6:\n            modayPrice = _context2.sent;\n            ratio = Number(modayPrice) / Number(sundayPrice);\n            return _context2.abrupt(\"return\", ratio);\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n\n  var initTree = function initTree() {\n    var isSufficient, ratio, tree;\n    return _regeneratorRuntime.async(function initTree$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(checkSufficiency());\n\n          case 3:\n            isSufficient = _context3.sent;\n\n            if (!isSufficient) {\n              _context3.next = 13;\n              break;\n            }\n\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(getRatio());\n\n          case 7:\n            ratio = _context3.sent;\n            console.log(\"Ratio: \" + ratio);\n\n            if (ratio >= 0.91) {\n              tree = Tree91;\n              console.log(\"Tree initialized to Tree91\");\n            } else if (ratio >= 0.85) {\n              tree = Tree85;\n              console.log(\"Tree initialized to Tree85\");\n            } else if (ratio >= 0.8) {\n              tree = Tree80;\n              console.log(\"Tree initialized to Tree80\");\n            } else if (ratio >= 0.6) {\n              tree = Tree60;\n              console.log(\"Tree initialized to Tree60\");\n            } else {\n              tree = Tree0;\n              console.log(\"Tree initialized to Tree0\");\n            }\n\n            tree = JSON.stringify(tree);\n            _context3.next = 13;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"tree\", tree));\n\n          case 13:\n            _context3.next = 18;\n            break;\n\n          case 15:\n            _context3.prev = 15;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var getTreeObject = function getTreeObject() {\n    var tree;\n    return _regeneratorRuntime.async(function getTreeObject$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"tree\"));\n\n          case 3:\n            tree = _context4.sent;\n            tree = JSON.parse(tree);\n            console.log(tree);\n            return _context4.abrupt(\"return\", tree);\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(_context4.t0);\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  var checkSufficiency = function checkSufficiency() {\n    var mon, sun;\n    return _regeneratorRuntime.async(function checkSufficiency$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"MondayAM\"));\n\n          case 3:\n            mon = _context5.sent;\n            _context5.next = 6;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"Sunday\"));\n\n          case 6:\n            sun = _context5.sent;\n\n            if (!(mon != null && sun != null)) {\n              _context5.next = 12;\n              break;\n            }\n\n            dispatch(setDataSufficiency(true));\n            return _context5.abrupt(\"return\", true);\n\n          case 12:\n            dispatch(setDataSufficiency(false));\n            return _context5.abrupt(\"return\", false);\n\n          case 14:\n            _context5.next = 19;\n            break;\n\n          case 16:\n            _context5.prev = 16;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.log(_context5.t0);\n\n          case 19:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  };\n\n  var updateTree = function updateTree(increase) {\n    var tree;\n    return _regeneratorRuntime.async(function updateTree$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(getTreeObject());\n\n          case 3:\n            tree = _context6.sent;\n\n            if (increase) {\n              if (tree.higher) {\n                tree = tree.higher;\n                console.log(\"tree increased\");\n              }\n            } else {\n              if (tree.lower) {\n                tree = tree.lower;\n                console.log(\"tree decreased\");\n              }\n            }\n\n            if (tree.notes) {\n              sendNotification(tree.notes);\n            }\n\n            _context6.next = 8;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"tree\", JSON.stringify(tree)));\n\n          case 8:\n            _context6.next = 13;\n            break;\n\n          case 10:\n            _context6.prev = 10;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.log(_context6.t0);\n\n          case 13:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  useEffect(function () {\n    checkSufficiency();\n  });\n  return setPrice;\n};","map":{"version":3,"sources":["/Users/daniel/Public/Projects/ACNH-Stalks-Helper/frontend/hooks/index.js"],"names":["useEffect","AsyncStorage","useDispatch","setDataSufficiency","useNotifications","Tree0","Tree60","Tree80","Tree85","Tree91","days","useSetPrice","dispatch","sendNotification","setPrice","price","day","setItem","console","log","checkSufficiency","isSufficient","initTree","getItem","indexOf","previousPrice","updateTree","parseInt","Keyboard","dismiss","getRatio","sundayPrice","modayPrice","ratio","Number","tree","JSON","stringify","getTreeObject","parse","mon","sun","increase","higher","lower","notes"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport { Keyboard, Alert } from \"react-native\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nimport { useDispatch } from \"react-redux\";\nimport { setDataSufficiency } from \"../actions/dataSufficiencyActions\";\nimport { useNotifications } from \"./useNotifications\";\n\nimport { Tree0, Tree60, Tree80, Tree85, Tree91 } from \"../models/trees\";\nimport { days } from \"../models/Dates\";\n\nexport const useSetPrice = () => {\n  /* Setup redux dispatcher for dataSufficiency */\n  const dispatch = useDispatch();\n  const sendNotification = useNotifications();\n\n  const setPrice = async (price, day) => {\n    try {\n      await AsyncStorage.setItem(day, price);\n      console.log(day + \" price set to \" + price);\n      const isSufficient = await checkSufficiency();\n      if (day == \"Sunday\" || day == \"MondayAM\") {\n        if (isSufficient) {\n          initTree();\n        }\n      } else {\n        if (isSufficient) {\n          let previousPrice = await AsyncStorage.getItem(\n            days[days.indexOf(day) - 1]\n          );\n          updateTree(parseInt(previousPrice, 10) < parseInt(price, 10));\n        }\n      }\n      Keyboard.dismiss();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const getRatio = async () => {\n    try {\n      const sundayPrice = await AsyncStorage.getItem(\"Sunday\");\n      const modayPrice = await AsyncStorage.getItem(\"MondayAM\");\n      const ratio = Number(modayPrice) / Number(sundayPrice);\n      return ratio;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const initTree = async () => {\n    try {\n      const isSufficient = await checkSufficiency();\n      if (isSufficient) {\n        const ratio = await getRatio();\n        console.log(\"Ratio: \" + ratio);\n\n        let tree;\n        if (ratio >= 0.91) {\n          tree = Tree91;\n          console.log(\"Tree initialized to Tree91\");\n        } else if (ratio >= 0.85) {\n          tree = Tree85;\n          console.log(\"Tree initialized to Tree85\");\n        } else if (ratio >= 0.8) {\n          tree = Tree80;\n          console.log(\"Tree initialized to Tree80\");\n        } else if (ratio >= 0.6) {\n          tree = Tree60;\n          console.log(\"Tree initialized to Tree60\");\n        } else {\n          tree = Tree0;\n          console.log(\"Tree initialized to Tree0\");\n        }\n\n        tree = JSON.stringify(tree);\n        await AsyncStorage.setItem(\"tree\", tree);\n        //getTreeObject();\n      }\n    } catch (e) {\n      //handleMissingBuyPrice();\n      console.log(e);\n    }\n  };\n\n  const getTreeObject = async () => {\n    try {\n      let tree = await AsyncStorage.getItem(\"tree\");\n      tree = JSON.parse(tree);\n      console.log(tree);\n      return tree;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  /* Change to go through ALL days, not just Sun/MonAM */\n  const checkSufficiency = async () => {\n    try {\n      const mon = await AsyncStorage.getItem(\"MondayAM\");\n      const sun = await AsyncStorage.getItem(\"Sunday\");\n\n      if (mon != null && sun != null) {\n        dispatch(setDataSufficiency(true));\n        return true;\n      } else {\n        dispatch(setDataSufficiency(false));\n        return false;\n      }\n\n      /*\n      \n      if (sun == null) {\n        dispatch(setDataSufficiency(fale));\n        return false;\n      } else {\n        \n      }\n      \n      */\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const updateTree = async (increase) => {\n    try {\n      let tree = await getTreeObject();\n      if (increase) {\n        if (tree.higher) {\n          tree = tree.higher;\n          console.log(\"tree increased\");\n        }\n      } else {\n        if (tree.lower) {\n          tree = tree.lower;\n          console.log(\"tree decreased\");\n        }\n      }\n      if (tree.notes) {\n        //Alert.alert(\"Alert\", tree.notes, [{ text: \"OK\" }]);\n        sendNotification(tree.notes);\n      }\n      await AsyncStorage.setItem(\"tree\", JSON.stringify(tree));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    checkSufficiency();\n  });\n\n  return setPrice;\n};\n"]},"metadata":{},"sourceType":"module"}