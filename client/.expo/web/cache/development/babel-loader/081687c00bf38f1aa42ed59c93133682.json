{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Notifications } from \"expo\";\nimport * as Permissions from \"expo-permissions\";\nimport Constants from \"expo-constants\";\nexport var useNotifications = function useNotifications() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      notificationSubscription = _useState6[0],\n      setNotificationSubscription = _useState6[1];\n\n  var registerForPushNotifications = function registerForPushNotifications() {\n    var _await$Permissions$ge, existingStatus, finalStatus, token;\n\n    return _regeneratorRuntime.async(function registerForPushNotifications$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!Constants.isDevice) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n          case 3:\n            _await$Permissions$ge = _context.sent;\n            existingStatus = _await$Permissions$ge.status;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus != \"granted\")) {\n              _context.next = 9;\n              break;\n            }\n\n            Alert.alert(\"Alert\", \"Notifications Not Available\", [{\n              text: \"OK\"\n            }]);\n            return _context.abrupt(\"return\");\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 11:\n            token = _context.sent;\n            setExpoPushToken(token);\n            _context.next = 16;\n            break;\n\n          case 15:\n            Alert.alert(\"Alert\", \"Must use physical device for push notification!\", [{\n              text: \"OK\"\n            }]);\n\n          case 16:\n            if (Platform.OS == \"android\") {\n              Notifications.createChannelAndroidAsync(\"default\", {\n                name: \"default\",\n                sound: true,\n                priority: \"max\",\n                vibrate: [0, 250, 250, 250]\n              });\n            }\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleNotifications = function handleNotifications(notification) {\n    Vibration.vibrate();\n    console.log(notification);\n    setNotification({\n      notification: notification\n    });\n  };\n\n  var sendPushNotification = function sendPushNotification(note) {\n    var message, response;\n    return _regeneratorRuntime.async(function sendPushNotification$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            message = {\n              to: expoPushToken,\n              sound: \"default\",\n              title: \"ACNH Stalks helper\",\n              body: note,\n              data: {\n                data: \"goes here\"\n              },\n              _displayInForeground: true\n            };\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"https://exp.host/--/api/v2/push/send\", {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Accept-encoding\": \"gzip, deflate\",\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(message)\n            }));\n\n          case 3:\n            response = _context2.sent;\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    registerForPushNotifications();\n    setNotificationSubscription(Notifications.addListener(handleNotifications));\n  }, []);\n  return sendPushNotification;\n};","map":{"version":3,"sources":["/Users/daniel/Public/Projects/ACNH-Stalks-Helper/frontend/hooks/useNotifications.js"],"names":["useState","useEffect","Notifications","Permissions","Constants","useNotifications","expoPushToken","setExpoPushToken","notification","setNotification","notificationSubscription","setNotificationSubscription","registerForPushNotifications","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","Alert","alert","text","getExpoPushTokenAsync","token","Platform","OS","createChannelAndroidAsync","name","sound","priority","vibrate","handleNotifications","Vibration","console","log","sendPushNotification","note","message","to","title","body","data","_displayInForeground","fetch","method","headers","Accept","JSON","stringify","response","addListener"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Vibration, Platform, Alert } from \"react-native\";\nimport { Notifications } from \"expo\";\nimport * as Permissions from \"expo-permissions\";\nimport Constants from \"expo-constants\";\n\nexport const useNotifications = () => {\n  const [expoPushToken, setExpoPushToken] = useState(\"\");\n  const [notification, setNotification] = useState({});\n  const [notificationSubscription, setNotificationSubscription] = useState();\n\n  const registerForPushNotifications = async () => {\n    if (Constants.isDevice) {\n      const { status: existingStatus } = await Permissions.getAsync(\n        Permissions.NOTIFICATIONS\n      );\n      let finalStatus = existingStatus;\n      if (existingStatus != \"granted\") {\n        Alert.alert(\"Alert\", \"Notifications Not Available\", [{ text: \"OK\" }]);\n        return;\n      }\n      const token = await Notifications.getExpoPushTokenAsync();\n      setExpoPushToken(token);\n    } else {\n      Alert.alert(\"Alert\", \"Must use physical device for push notification!\", [\n        { text: \"OK\" },\n      ]);\n    }\n\n    if (Platform.OS == \"android\") {\n      Notifications.createChannelAndroidAsync(\"default\", {\n        name: \"default\",\n        sound: true,\n        priority: \"max\",\n        vibrate: [0, 250, 250, 250],\n      });\n    }\n  };\n\n  const handleNotifications = (notification) => {\n    Vibration.vibrate();\n    console.log(notification);\n    setNotification({ notification: notification });\n  };\n\n  const sendPushNotification = async (note) => {\n    const message = {\n      to: expoPushToken,\n      sound: \"default\",\n      title: \"ACNH Stalks helper\",\n      body: note,\n      data: { data: \"goes here\" },\n      _displayInForeground: true,\n    };\n    const response = await fetch(\"https://exp.host/--/api/v2/push/send\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Accept-encoding\": \"gzip, deflate\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(message),\n    });\n  };\n\n  useEffect(() => {\n    registerForPushNotifications();\n    setNotificationSubscription(Notifications.addListener(handleNotifications));\n  }, []);\n\n  return sendPushNotification;\n};\n"]},"metadata":{},"sourceType":"module"}