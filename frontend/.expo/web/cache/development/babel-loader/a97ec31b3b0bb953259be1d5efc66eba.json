{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/daniel/Public/Projects/ACNH-Stalks-Helper/frontend/screen/DataScreen.js\";\n\nfunction _createForOfIteratorHelperLoose(o) { var i = 0; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } i = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return i.next.bind(i); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { useDispatch } from \"react-redux\";\nimport { clearYield, setCurPrice } from \"../actions/yieldActions\";\nimport { primaryColors, secondaryColors } from \"../models/Styles.js\";\nimport { days } from \"../models/Dates\";\nimport ChartFull from \"../components/ChartFull\";\nimport TouchableButton from \"../components/TouchableButton\";\nimport FullPriceEntry from \"../components/FullPriceEntry\";\n\nvar DataScreen = function DataScreen() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var resetPrices = function resetPrices() {\n    var keys, _iterator, _step, key;\n\n    return _regeneratorRuntime.async(function resetPrices$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getAllKeys());\n\n          case 3:\n            keys = _context.sent;\n            _iterator = _createForOfIteratorHelperLoose(keys);\n\n          case 5:\n            if ((_step = _iterator()).done) {\n              _context.next = 12;\n              break;\n            }\n\n            key = _step.value;\n\n            if (!days.includes(key)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem(key));\n\n          case 10:\n            _context.next = 5;\n            break;\n\n          case 12:\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem(\"tree\"));\n\n          case 14:\n            dispatch(clearYield());\n            dispatch(setCurPrice(0));\n            Alert.alert(\"Prices Reset\", \"Prices reset successfully\", [{\n              text: \"OK\"\n            }]);\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 19]], Promise);\n  };\n\n  var printStorage = function printStorage() {\n    var keys, s;\n    return _regeneratorRuntime.async(function printStorage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getAllKeys());\n\n          case 3:\n            keys = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(AsyncStorage.multiGet(keys));\n\n          case 6:\n            s = _context2.sent;\n            console.log(s);\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, React.createElement(Modal, {\n    visible: modalVisible,\n    animationType: \"slide\",\n    transparent: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, React.createElement(FullPriceEntry, {\n    setModalVisible: setModalVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })), React.createElement(ChartFull, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), React.createElement(TouchableButton, {\n    onPress: function onPress() {\n      return setModalVisible(true);\n    },\n    backgroundColor: primaryColors.darkgreen,\n    color: primaryColors.cream,\n    text: \"Edit Prices\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), React.createElement(TouchableButton, {\n    onPress: resetPrices,\n    color: primaryColors.darkgreen,\n    backgroundColor: secondaryColors.rose,\n    text: \"Reset Prices\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), React.createElement(TouchableButton, {\n    onPress: printStorage,\n    backgroundColor: secondaryColors.purple,\n    color: primaryColors.cream,\n    text: \"Print Storage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: primaryColors.islandgreen,\n    paddingTop: 50,\n    alignItems: \"center\"\n  },\n  header: {\n    alignSelf: \"center\",\n    marginTop: 50,\n    fontSize: 30\n  },\n  line: {\n    height: 1,\n    backgroundColor: primaryColors.darkgreen,\n    marginBottom: 5\n  },\n  button: {\n    backgroundColor: secondaryColors.rose,\n    fontFamily: \"acnh\",\n    alignSelf: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: Dimensions.get(\"window\").width / 1.05,\n    height: 40,\n    borderRadius: 10,\n    marginTop: 5,\n    shadowOpacity: 0.2,\n    shadowRadius: 1,\n    shadowOffset: {\n      height: 2,\n      width: 2\n    }\n  },\n  buttonText: {\n    paddingTop: 10,\n    fontFamily: \"acnh\",\n    color: primaryColors.cream\n  }\n});\nexport default DataScreen;","map":{"version":3,"sources":["/Users/daniel/Public/Projects/ACNH-Stalks-Helper/frontend/screen/DataScreen.js"],"names":["React","useState","AsyncStorage","useDispatch","clearYield","setCurPrice","primaryColors","secondaryColors","days","ChartFull","TouchableButton","FullPriceEntry","DataScreen","dispatch","modalVisible","setModalVisible","resetPrices","getAllKeys","keys","key","includes","removeItem","Alert","alert","text","console","log","printStorage","multiGet","s","styles","container","darkgreen","cream","rose","purple","StyleSheet","create","flex","backgroundColor","islandgreen","paddingTop","alignItems","header","alignSelf","marginTop","fontSize","line","height","marginBottom","button","fontFamily","justifyContent","width","Dimensions","get","borderRadius","shadowOpacity","shadowRadius","shadowOffset","buttonText","color"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Provides context for DataScreen screen\n */\n\nimport React, { useState } from \"react\";\nimport { StyleSheet, View, Dimensions, Modal, Alert } from \"react-native\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nimport { useDispatch } from \"react-redux\";\nimport { clearYield, setCurPrice } from \"../actions/yieldActions\";\n\nimport { primaryColors, secondaryColors } from \"../models/Styles.js\";\nimport { days } from \"../models/Dates\";\n\nimport ChartFull from \"../components/ChartFull\";\nimport TouchableButton from \"../components/TouchableButton\";\nimport FullPriceEntry from \"../components/FullPriceEntry\";\n\n/**\n * DataScreen provides the screen for the full chart and data entry components\n * @return {!JSX} Screen to be shown\n */\nconst DataScreen = () => {\n  const dispatch = useDispatch();\n  const [modalVisible, setModalVisible] = useState(false);\n\n  /**\n   * Clears all prices and tree stored in AsyncStorage.\n   * Clears yield and currentPrice states in redux.\n   */\n  const resetPrices = async () => {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      for (const key of keys) {\n        if (days.includes(key)) {\n          await AsyncStorage.removeItem(key);\n        }\n      }\n      await AsyncStorage.removeItem(\"tree\");\n      dispatch(clearYield());\n      dispatch(setCurPrice(0));\n      Alert.alert(\"Prices Reset\", \"Prices reset successfully\", [\n        { text: \"OK\" },\n      ]);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  //resetPrices();\n\n  /**\n   * Logs everything stored in AsyncStorage\n   */\n  const printStorage = async () => {\n    try {\n      const keys = await AsyncStorage.getAllKeys();\n      const s = await AsyncStorage.multiGet(keys);\n      console.log(s);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Modal visible={modalVisible} animationType=\"slide\" transparent={false}>\n        <FullPriceEntry setModalVisible={setModalVisible} />\n      </Modal>\n      <ChartFull />\n      <TouchableButton\n        onPress={() => setModalVisible(true)}\n        backgroundColor={primaryColors.darkgreen}\n        color={primaryColors.cream}\n        text=\"Edit Prices\"\n      />\n      <TouchableButton\n        onPress={resetPrices}\n        color={primaryColors.darkgreen}\n        backgroundColor={secondaryColors.rose}\n        text=\"Reset Prices\"\n      />\n      <TouchableButton\n        onPress={printStorage}\n        backgroundColor={secondaryColors.purple}\n        color={primaryColors.cream}\n        text=\"Print Storage\"\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: primaryColors.islandgreen,\n    paddingTop: 50,\n    alignItems: \"center\",\n  },\n  header: {\n    alignSelf: \"center\",\n    marginTop: 50,\n    fontSize: 30,\n  },\n  line: {\n    height: 1,\n    backgroundColor: primaryColors.darkgreen,\n    marginBottom: 5,\n  },\n  button: {\n    backgroundColor: secondaryColors.rose,\n    fontFamily: \"acnh\",\n    alignSelf: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: Dimensions.get(\"window\").width / 1.05,\n    height: 40,\n    borderRadius: 10,\n    marginTop: 5,\n    shadowOpacity: 0.2,\n    shadowRadius: 1,\n    shadowOffset: {\n      height: 2,\n      width: 2,\n    },\n  },\n  buttonText: {\n    paddingTop: 10,\n    fontFamily: \"acnh\",\n    color: primaryColors.cream,\n  },\n});\n\nexport default DataScreen;\n"]},"metadata":{},"sourceType":"module"}