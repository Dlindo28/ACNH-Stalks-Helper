{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/daniel/Public/Projects/ACNH-Stalks-Helper/frontend/App.js\";\nimport \"react-native-gesture-handler\";\nimport React, { useEffect, useState } from \"react\";\nimport { useFonts } from \"@use-expo/font\";\nimport { AppLoading } from \"expo\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport { Entypo } from \"@expo/vector-icons\";\nimport { primaryColors } from \"./models/Styles.js\";\nimport Home from \"./screen/Home\";\nimport Settings from \"./screen/Settings\";\nimport DataScreen from \"./screen/DataScreen\";\nimport { Provider, useSelector } from \"react-redux\";\nimport store from \"./createStore\";\nvar Tab = createMaterialTopTabNavigator();\n\nvar AppBuilder = function AppBuilder() {\n  var _useFonts = useFonts({\n    acnh: require(\"./assets/fonts/nintendoP_Humming-E_002pr.otf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  if (fontsLoaded) {\n    return React.createElement(NavigationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, React.createElement(Tab.Navigator, {\n      screenOptions: function screenOptions(_ref) {\n        var route = _ref.route;\n        return {\n          tabBarIcon: function tabBarIcon(_ref2) {\n            var focused = _ref2.focused;\n            var iconColor;\n            var iconName;\n\n            switch (route.name) {\n              case \"Home\":\n                iconName = \"home\";\n                iconColor = focused ? primaryColors.islandgreen : primaryColors.darkgreen;\n                break;\n\n              case \"Settings\":\n                iconName = \"cog\";\n                iconColor = focused ? primaryColors.islandgreen : primaryColors.darkgreen;\n                break;\n\n              case \"Data\":\n                iconName = \"bar-graph\";\n                iconColor = focused ? primaryColors.islandgreen : primaryColors.darkgreen;\n                break;\n\n              default:\n                iconName = \"home\";\n                iconColor = focused ? primaryColors.islandgreen : primaryColors.darkgreen;\n                break;\n            }\n\n            return React.createElement(Entypo, {\n              name: iconName,\n              color: iconColor,\n              size: 20,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 22\n              }\n            });\n          }\n        };\n      },\n      tabBarOptions: {\n        showLabel: false,\n        tabStyle: {\n          backgroundColor: primaryColors.cream,\n          height: 70\n        },\n        showIcon: true,\n        pressOpacity: 1\n      },\n      tabBarPosition: \"bottom\",\n      swipeEnabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, React.createElement(Tab.Screen, {\n      name: \"Home\",\n      component: Home,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }), React.createElement(Tab.Screen, {\n      name: \"Data\",\n      component: DataScreen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }), React.createElement(Tab.Screen, {\n      name: \"Settings\",\n      component: Settings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    })));\n  } else {\n    return React.createElement(AppLoading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 12\n      }\n    });\n  }\n};\n\nvar App = function App() {\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, React.createElement(AppBuilder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/daniel/Public/Projects/ACNH-Stalks-Helper/frontend/App.js"],"names":["React","useEffect","useState","useFonts","AppLoading","NavigationContainer","createMaterialTopTabNavigator","Entypo","primaryColors","Home","Settings","DataScreen","Provider","useSelector","store","Tab","AppBuilder","acnh","require","fontsLoaded","route","tabBarIcon","focused","iconColor","iconName","name","islandgreen","darkgreen","showLabel","tabStyle","backgroundColor","cream","height","showIcon","pressOpacity","App"],"mappings":"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","sourcesContent":["import \"react-native-gesture-handler\";\nimport React, { useEffect, useState } from \"react\";\nimport { useFonts } from \"@use-expo/font\";\nimport { AppLoading } from \"expo\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\n\nimport { Entypo } from \"@expo/vector-icons\";\n\nimport { primaryColors } from \"./models/Styles.js\";\n\nimport Home from \"./screen/Home\";\nimport Settings from \"./screen/Settings\";\nimport DataScreen from \"./screen/DataScreen\";\n\nimport { Provider, useSelector } from \"react-redux\";\nimport store from \"./createStore\";\n\nconst Tab = createMaterialTopTabNavigator();\n\nconst AppBuilder = () => {\n  let [fontsLoaded] = useFonts({\n    acnh: require(\"./assets/fonts/nintendoP_Humming-E_002pr.otf\"),\n  });\n\n  if (fontsLoaded) {\n    return (\n      <NavigationContainer>\n        <Tab.Navigator\n          screenOptions={({ route }) => ({\n            tabBarIcon: ({ focused }) => {\n              let iconColor;\n              let iconName;\n              switch (route.name) {\n                case \"Home\":\n                  iconName = \"home\";\n                  iconColor = focused\n                    ? primaryColors.islandgreen\n                    : primaryColors.darkgreen;\n                  break;\n                case \"Settings\":\n                  iconName = \"cog\";\n                  iconColor = focused\n                    ? primaryColors.islandgreen\n                    : primaryColors.darkgreen;\n                  break;\n\n                case \"Data\":\n                  iconName = \"bar-graph\";\n                  iconColor = focused\n                    ? primaryColors.islandgreen\n                    : primaryColors.darkgreen;\n                  break;\n                default:\n                  iconName = \"home\";\n                  iconColor = focused\n                    ? primaryColors.islandgreen\n                    : primaryColors.darkgreen;\n                  break;\n              }\n              return <Entypo name={iconName} color={iconColor} size={20} />;\n            },\n          })}\n          tabBarOptions={{\n            showLabel: false,\n            tabStyle: {\n              backgroundColor: primaryColors.cream,\n              height: 70,\n            },\n            showIcon: true,\n            pressOpacity: 1,\n          }}\n          tabBarPosition=\"bottom\"\n          swipeEnabled={true}\n        >\n          <Tab.Screen name=\"Home\" component={Home} />\n          <Tab.Screen name=\"Data\" component={DataScreen} />\n          <Tab.Screen name=\"Settings\" component={Settings} />\n        </Tab.Navigator>\n      </NavigationContainer>\n    );\n  } else {\n    return <AppLoading />;\n  }\n};\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <AppBuilder />\n    </Provider>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}