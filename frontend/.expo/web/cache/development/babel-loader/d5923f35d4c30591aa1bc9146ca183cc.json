{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/daniel/Public/Projects/ACNH-Stalks-Helper/frontend/components/DateHeader.js\";\nimport React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { AppLoading } from \"expo\";\nimport { primaryColors, fonts } from \"../models/Styles.js\";\nimport { day } from \"../models/Dates.js\";\nexport default function DateHeader() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      weekday = _useState2[0],\n      setDay = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      meridian = _useState4[0],\n      setMeridian = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hour = _useState6[0],\n      setHour = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      minute = _useState8[0],\n      setMinute = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      timeLoaded = _useState10[0],\n      setTimeLoaded = _useState10[1];\n\n  useLayoutEffect(function () {\n    setInterval(function () {\n      var d = new Date();\n      var meridianControl = new Date();\n      meridianControl.setHours(12);\n      setDay(day[d.toDateString().split(\" \")[0]]);\n      setMeridian(d.getTime() < meridianControl.getTime() ? \"AM\" : \"PM\");\n      setHour(d.getHours() % 12);\n      setMinute(d.getMinutes());\n      setTimeLoaded(true);\n    }, 20000);\n  });\n\n  if (timeLoaded) {\n    return React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.dateText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, weekday, \" \", meridian), React.createElement(Text, {\n      style: styles.timeText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, hour != 0 ? hour : \"12\", \":\", minute < 10 ? \"0\" + minute.toString() : minute, meridian.toLowerCase()));\n  } else {\n    return React.createElement(AppLoading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 12\n      }\n    });\n  }\n}\nvar styles = StyleSheet.create({\n  dateContainer: {\n    marginTop: 50\n  },\n  dateText: {\n    fontFamily: \"acnh\",\n    fontSize: 20,\n    alignSelf: \"center\"\n  },\n  timeText: {\n    fontFamily: \"acnh\",\n    fontSize: 15,\n    alignSelf: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/daniel/Public/Projects/ACNH-Stalks-Helper/frontend/components/DateHeader.js"],"names":["React","useState","useEffect","useLayoutEffect","AppLoading","primaryColors","fonts","day","DateHeader","weekday","setDay","meridian","setMeridian","hour","setHour","minute","setMinute","timeLoaded","setTimeLoaded","setInterval","d","Date","meridianControl","setHours","toDateString","split","getTime","getHours","getMinutes","styles","dateText","timeText","toString","toLowerCase","StyleSheet","create","dateContainer","marginTop","fontFamily","fontSize","alignSelf"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,eAArC,QAA4D,OAA5D;;;;AAEA,SAASC,UAAT,QAA2B,MAA3B;AAEA,SAASC,aAAT,EAAwBC,KAAxB;AACA,SAASC,GAAT;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA,kBACTP,QAAQ,CAAC,EAAD,CADC;AAAA;AAAA,MAC5BQ,OAD4B;AAAA,MACnBC,MADmB;;AAAA,mBAEHT,QAAQ,CAAC,EAAD,CAFL;AAAA;AAAA,MAE5BU,QAF4B;AAAA,MAElBC,WAFkB;;AAAA,mBAGXX,QAAQ,EAHG;AAAA;AAAA,MAG5BY,IAH4B;AAAA,MAGtBC,OAHsB;;AAAA,mBAIPb,QAAQ,EAJD;AAAA;AAAA,MAI5Bc,MAJ4B;AAAA,MAIpBC,SAJoB;;AAAA,mBAKCf,QAAQ,CAAC,KAAD,CALT;AAAA;AAAA,MAK5BgB,UAL4B;AAAA,MAKhBC,aALgB;;AAOnCf,EAAAA,eAAe,CAAC,YAAM;AACpBgB,IAAAA,WAAW,CAAC,YAAM;AAChB,UAAIC,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACA,UAAIC,eAAe,GAAG,IAAID,IAAJ,EAAtB;AACAC,MAAAA,eAAe,CAACC,QAAhB,CAAyB,EAAzB;AACAb,MAAAA,MAAM,CAACH,GAAG,CAACa,CAAC,CAACI,YAAF,GAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAD,CAAJ,CAAN;AACAb,MAAAA,WAAW,CAACQ,CAAC,CAACM,OAAF,KAAcJ,eAAe,CAACI,OAAhB,EAAd,GAA0C,IAA1C,GAAiD,IAAlD,CAAX;AACAZ,MAAAA,OAAO,CAACM,CAAC,CAACO,QAAF,KAAe,EAAhB,CAAP;AACAX,MAAAA,SAAS,CAACI,CAAC,CAACQ,UAAF,EAAD,CAAT;AACAV,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KATU,EASR,KATQ,CAAX;AAUD,GAXc,CAAf;;AAaA,MAAID,UAAJ,EAAgB;AACd,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEY,MAAM,CAACC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGrB,OADH,OACaE,QADb,CADF,EAIE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEkB,MAAM,CAACE,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGlB,IAAI,IAAI,CAAR,GAAYA,IAAZ,GAAmB,IADtB,OAEGE,MAAM,GAAG,EAAT,GAAc,MAAMA,MAAM,CAACiB,QAAP,EAApB,GAAwCjB,MAF3C,EAGGJ,QAAQ,CAACsB,WAAT,EAHH,CAJF,CADF;AAYD,GAbD,MAaO;AACL,WAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AACF;AAED,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,aAAa,EAAE;AACbC,IAAAA,SAAS,EAAE;AADE,GADgB;AAI/BP,EAAAA,QAAQ,EAAE;AACRQ,IAAAA,UAAU,EAAE,MADJ;AAERC,IAAAA,QAAQ,EAAE,EAFF;AAGRC,IAAAA,SAAS,EAAE;AAHH,GAJqB;AAS/BT,EAAAA,QAAQ,EAAE;AACRO,IAAAA,UAAU,EAAE,MADJ;AAERC,IAAAA,QAAQ,EAAE,EAFF;AAGRC,IAAAA,SAAS,EAAE;AAHH;AATqB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { AppLoading } from \"expo\";\n\nimport { primaryColors, fonts } from \"../models/Styles.js\";\nimport { day } from \"../models/Dates.js\";\n\nexport default function DateHeader() {\n  const [weekday, setDay] = useState(\"\");\n  const [meridian, setMeridian] = useState(\"\");\n  const [hour, setHour] = useState();\n  const [minute, setMinute] = useState();\n  const [timeLoaded, setTimeLoaded] = useState(false);\n\n  useLayoutEffect(() => {\n    setInterval(() => {\n      let d = new Date();\n      let meridianControl = new Date();\n      meridianControl.setHours(12);\n      setDay(day[d.toDateString().split(\" \")[0]]);\n      setMeridian(d.getTime() < meridianControl.getTime() ? \"AM\" : \"PM\");\n      setHour(d.getHours() % 12);\n      setMinute(d.getMinutes());\n      setTimeLoaded(true);\n    }, 20000);\n  });\n\n  if (timeLoaded) {\n    return (\n      <View>\n        <Text style={styles.dateText}>\n          {weekday} {meridian}\n        </Text>\n        <Text style={styles.timeText}>\n          {hour != 0 ? hour : \"12\"}:\n          {minute < 10 ? \"0\" + minute.toString() : minute}\n          {meridian.toLowerCase()}\n        </Text>\n      </View>\n    );\n  } else {\n    return <AppLoading />;\n  }\n}\n\nconst styles = StyleSheet.create({\n  dateContainer: {\n    marginTop: 50,\n  },\n  dateText: {\n    fontFamily: \"acnh\",\n    fontSize: 20,\n    alignSelf: \"center\",\n  },\n  timeText: {\n    fontFamily: \"acnh\",\n    fontSize: 15,\n    alignSelf: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}